import groovy.json.JsonSlurper
import org.apache.groovy.json.internal.LazyMap
import java.nio.charset.StandardCharsets


buildscript{
    repositories{
        mavenCentral()
    }

    dependencies{
        classpath "org.codehaus.groovy:groovy-json:3.0.8" // <- For JsonSlurper syntax highlighting
    }
}

plugins{
    id "java"
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}


ext{
    serverDirectoryPath = System.getenv("MINDUSTRY_SERVER_HOME")
    metadata = new JsonSlurper().parseText(file("$rootDir/plugin.json").text) as LazyMap

    versions = [
            "mindustry": property("props.mindustry-version"),
            "arc": property("props.arc-version"),
            "junit": "5.8.2"
    ]
}

group property("props.project-group")
version metadata.version


repositories{
    mavenCentral()
    maven{ url "https://www.jitpack.io" }
}

dependencies{
    // Mindustry
    compileOnly "com.github.Anuken.Arc:arc-core:${versions.arc}"
    compileOnly "com.github.Anuken.Arc:backend-headless:${versions.arc}"
    compileOnly "com.github.Anuken.Mindustry:core:${versions.mindustry}"
    compileOnly "com.github.Anuken.Mindustry:server:${versions.mindustry}"

    // Unit Testing
    testImplementation "com.github.Anuken.Arc:arc-core:${versions.arc}"
    testImplementation "com.github.Anuken.Arc:backend-headless:${versions.arc}"
    testImplementation "com.github.Anuken.Mindustry:core:${versions.mindustry}"
    testImplementation "com.github.Anuken.Mindustry:server:${versions.mindustry}"

    testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.junit}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
}

java{
    withSourcesJar()
}

test{
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    options.encoding = StandardCharsets.UTF_8
}


shadowJar{
    from "$rootDir/plugin.json"
}

build{
    dependsOn shadowJar
}

task moveJar(dependsOn: shadowJar){
    doLast{
        // Deletes all the jar files that begins with the base artifact name
        delete file("$serverDirectoryPath/config/mods").listFiles({
            it.isFile() && it.name.endsWith(".jar") && it.name.startsWith((String) shadowJar.archiveBaseName.get())
        } as FileFilter)

        copy{
            from shadowJar.archiveFile.get()
            into file("$serverDirectoryPath/config/mods")
        }
    }
}

task runServer{
    doLast{
        javaexec{
            workingDir = serverDirectoryPath
            classpath = files("$serverDirectoryPath/server.jar")
            mainClass = "mindustry.server.ServerLauncher"
            standardInput = System.in
        }
    }
}

[moveJar, runServer].forEach {
    it.onlyIf { serverDirectoryPath != null && file(serverDirectoryPath).exists() }
}

// Required if you want to use the Release GitHub action
task getArtifactPath{
    doLast{ println shadowJar.archiveFile.get().toString() }
}

publishing{
    publications{
        create("jitpack", MavenPublication){
            from components.java

            pom{
                description = metadata.description
                url = "https://github.com/$metadata.repo"

                licenses{
                    license{
                        name = "MIT License as Publication"
                        url = "https://www.opensource.org/licenses/mit-license.php"
                    }
                }

                developers{
                    developer{
                        id = metadata.author
                    }
                }
            }
        }
    }
}
