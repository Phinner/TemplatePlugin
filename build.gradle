import groovy.json.JsonSlurper
import java.nio.charset.StandardCharsets


buildscript{
    ext{
        // Properties
        mindustryVersion = property("props.mindustry-version")
        serverDirectoryPath = System.getenv("MINDUSTRY_SERVER_HOME")
        // Plugin metadata extracted from plugin.json
        metadata = new JsonSlurper().parseText(file("$rootDir/plugin.json").text)
    }

    repositories{
        mavenCentral()
        maven{ url "https://www.jitpack.io" }
    }

    dependencies{
        classpath "org.codehaus.groovy:groovy-json:3.0.8" // <- For JsonSlurper syntax highlighting
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    }
}


plugins{
    id "java"
    id "maven-publish"
}


group property("props.project-group")
version metadata.version


repositories{
    mavenCentral()
    maven{ url "https://www.jitpack.io" }
}

dependencies{
    // Mindustry
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    // Unit Testing
    testImplementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    testImplementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.1"
}


java{
    withSourcesJar()
}

compileJava{
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = StandardCharsets.UTF_8
}

test{
    useJUnitPlatform()
}

compileTestJava{
    options.encoding = StandardCharsets.UTF_8
}


jar{
    archiveBaseName = project.property("props.project-name")

    // The following line is required
    from configurations.runtimeClasspath.collect{
        it.isDirectory() ? it : zipTree(it)
    }

    from "$rootDir/plugin.json"
}


if(serverDirectoryPath != null && file(serverDirectoryPath).exists()){
    task moveJar{
        dependsOn jar

        doLast{
            // Deletes all the jar files that begins with the base artifact name
            delete file("$serverDirectoryPath/config/mods").listFiles({
                it.isFile() && it.name.endsWith(".jar") && it.name.startsWith((String) jar.archiveBaseName.get())
            } as FileFilter)

            copy{
                from jar.archiveFile.get()
                into file("$serverDirectoryPath/config/mods")
            }
        }
    }

    task runServer(type: JavaExec){
        workingDir = serverDirectoryPath
        classpath = files("$serverDirectoryPath/server.jar")
        mainClass = "mindustry.server.ServerLauncher"
        standardInput = System.in
    }

    task deployJar{
        dependsOn moveJar
        dependsOn runServer
    }
}

// Required if you want to use the Release GitHub action
task getArtifactPath{
    doLast{ println jar.archiveFile.get().toString() }
}

// Utility task :^)
task generateReadmeHeader{
    doLast{
        StringBuilder builder = new StringBuilder(512)

        builder.append("# ").append(project.property("props.project-name")).append("\n\n")
        builder.append("[![Jitpack latest version](https://jitpack.io/v/${metadata.repo}.svg)](https://jitpack.io/#${metadata.repo})\n")
        builder.append("[![Build status](https://github.com/${metadata.repo}/actions/workflows/build.yml/badge.svg?branch=master&event=push)]" +
                "(https://github.com/${metadata.repo}/actions/workflows/build.yml)\n")
        builder.append("[![Mindustry 6.0 | 7.0 ](https://img.shields.io/badge/Mindustry-6.0%20%7C%207.0-ffd37f)]" +
                "(https://github.com/Anuken/Mindustry/releases)\n\n")
        builder.append("## Description").append("\n\n").append(metadata.description)

        if(!file("$rootDir/generated").exists()) file("$rootDir/generated").mkdir()
        file("$rootDir/generated/README.md").write(builder.toString())
    }
}


publishing{
    publications{
        maven(MavenPublication){
            from components.java

            pom{
                name = metadata.displayName
                artifactId = metadata.name
                description = metadata.description
                url = "https://github.com/$metadata.repo"

                licenses{
                    license{
                        name = "MIT License as Publication"
                        url = "https://www.opensource.org/licenses/mit-license.php"
                    }
                }

                developers{
                    developer{
                        id = metadata.author
                    }
                }
            }
        }
    }
}
